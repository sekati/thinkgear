/** * ThinkGearMain * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package {	import sekati.core.App;	import sekati.display.CoreSprite;	import sekati.display.Document;	import com.sekati.thinkgear.core.ThinkGearConnector;	import com.sekati.thinkgear.ui.BackgroundView;	import com.sekati.thinkgear.ui.DemoView;	import com.sekati.thinkgear.ui.SpinupView;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.utils.setTimeout;			/**	 * ThinkGearMain provides the main application class to the ThinkGear API.	 */	final public class ThinkGearMain extends Document {		/*** @private */		private var bg : BackgroundView;				/*** @private */		private var view : CoreSprite;		/**		 * ThinkGearMain Constructor		 */		public function ThinkGearMain() {			super( );		}		/**		 * @inheritDoc		 */		override protected function initEntryPoint() : void {			super.initEntryPoint( );						bg = new BackgroundView( );						// create the spin-up view.						view = new SpinupView( App.db.config.custom.thinkgear.spinup.caption.toUpperCase( ) );			addChildren( bg, view );						// ramp up the connector ...			setTimeout( initConnector, App.db.config.custom.thinkgear.spinup.delay );		}		/**		 * Initialize the connector socket & wait for socket data ...		 */		private function initConnector() : void {			ThinkGearConnector.$.initialize( );			ThinkGearConnector.$.socket.addEventListener( Event.CONNECT, socketConnectHandler );			ThinkGearConnector.$.socket.addEventListener( Event.CLOSE, socketFailHandler );			ThinkGearConnector.$.socket.addEventListener( IOErrorEvent.IO_ERROR, socketFailHandler );			ThinkGearConnector.$.socket.addEventListener( SecurityErrorEvent.SECURITY_ERROR, socketFailHandler );							}		/**		 * Handle the socket connect event: build the view!		 */		private function socketConnectHandler(e : Event) : void {			ThinkGearConnector.$.socket.removeEventListener( Event.CONNECT, socketConnectHandler );									// remove the spin-up view			destroyView( );						// add the demo view.						view = new DemoView( );			addChild( view );		}		/**		 * Handle a socket failure event!		 */		private function socketFailHandler(e : Event) : void {			ThinkGearConnector.$.socket.removeEventListener( Event.CLOSE, socketFailHandler );			ThinkGearConnector.$.socket.removeEventListener( IOErrorEvent.IO_ERROR, socketFailHandler );			ThinkGearConnector.$.socket.removeEventListener( SecurityErrorEvent.SECURITY_ERROR, socketFailHandler );												// destroy the demo view.			destroyView( );						// add the spinup view with a custom message.			view = new SpinupView( App.db.config.custom.thinkgear.spinup.error.toUpperCase( ) );			addChild( view ); 		}		/**		 * Destroy view		 */		private function destroyView() : void {			removeChild( view );			view.destroy( );			view = null;		}	}}