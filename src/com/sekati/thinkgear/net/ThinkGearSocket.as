/** * com.sekati.thinkgear.net.ThinkGearSocket * @version 1.1.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Derrivative of kannopy thinkgear api. */package com.sekati.thinkgear.net {	import sekati.log.Logger;	import com.adobe.serialization.json.JSON;	import com.sekati.thinkgear.reader.ThinkGearReader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.Socket;		/**	 * ThinkGearSocket communicates with the ThinkGear Connector (TGC) & reads byte data into the reader buffer.	 * 	 * Additionally the socket now supports optional JSON mode.	 */	final public class ThinkGearSocket extends Socket {		/**		 * The ThinkGear Connector (TGC) host address, default: localhost/127.0.0.1. 		 */		public static const TGC_HOST : String = '127.0.0.1';		/**		 * The ThinkGear Connector (TGC) TCP port to capture data from.		 */		public static const TGC_PORT : int = 13854;		/**		 * The ThinkGear Connector (TGC) mode descriptor for binary data feed (Default).		 */		public static const TGC_MODE_BINARY : String = 'BinaryPacket';		/**		 * The ThinkGear Connector (TGC) mode descriptor for JSON data feed (Optional).		 */		public static const TGC_MODE_JSON : String = 'Json';		/*** @private */		private var _reader : ThinkGearReader;		/*** @private */				private var _format : String;		/*** @private */				private var _enableRawOutput : Boolean;		/**		 * ThinkGearSocket Constructor		 */		public function ThinkGearSocket(host : String = null, port : int = 0) {			_format = TGC_MODE_BINARY;			_enableRawOutput = true;			super( host, port );		}		/**		 * Buffer instance used by the socket to read byte data from the ThinkGear Connector.		 */		public function set reader( reader : ThinkGearReader ) : void {			_reader = reader;		}		/**		 * Establishes communication with the ThinkGear Connector. Sets up socket		 * listeners to monitor socket activity.		 */		public function start() : void {			createSocketListeners( );			connect( TGC_HOST, TGC_PORT );				}		/**		 * Breaks communication with the ThinkGear Connector. Destroys socket listeners.		 */		public function stop() : void {			removeSocketListeners( );		}		/**		 * XXX - Not Yet Fully Implemented!		 * 		 * Send a specialized <i>Configuration Packet</i> to the ThinkGear Connector (TGC).		 * @param format selects the data stream format. Must be: <code>Json</code> or <code>BinaryPacket</code> (Default).		 * @param enableRawOutput determines whether raw sensor data is included or not (Default: <code>true</code>).		 */		public function configure(format : String, enableRawOutput : Boolean) : void {			if(format != TGC_MODE_BINARY && format != TGC_MODE_JSON) {				throw new ArgumentError( 'ThinkGearSocket.setDataFormat format argument must be TGC_MODE_BINARY or TGC_MODE_JSON' );			}			//var authorization : Object = { "appName": "SekatiBCI", "appKey": "1111111111111111110000000000000000000000" };			//writeUTFBytes( JSON.encode( authorization ) );			var configuration : Object = new Object( );			configuration["enableRawOutput"] = enableRawOutput;			configuration["format"] = format;								writeUTFBytes( JSON.encode( configuration ) );			Logger.$.notice( this, 'Configuring TGC enableRawOutput: ' + enableRawOutput + ", format: " + format );		}		/**		 * Create socket listeners to monitor socket activity.		 */		private function createSocketListeners() : void {			addEventListener( ProgressEvent.SOCKET_DATA, handleSocketData );			addEventListener( IOErrorEvent.IO_ERROR, handleSocketError );			addEventListener( SecurityErrorEvent.SECURITY_ERROR, handleSecurityError );			addEventListener( Event.CONNECT, handleSocketConnection );			addEventListener( Event.CLOSE, handleSocketClose );			addEventListener( Event.ACTIVATE, handleSocketActivate );			addEventListener( Event.DEACTIVATE, handleSocketDeactivate );		}		/**		 * Destroy socket listeners.		 */		private function removeSocketListeners() : void {			removeEventListener( ProgressEvent.SOCKET_DATA, handleSocketData );			removeEventListener( IOErrorEvent.IO_ERROR, handleSocketError );			removeEventListener( SecurityErrorEvent.SECURITY_ERROR, handleSecurityError );			removeEventListener( Event.CONNECT, handleSocketConnection );			removeEventListener( Event.CLOSE, handleSocketClose );			removeEventListener( Event.ACTIVATE, handleSocketActivate );			removeEventListener( Event.DEACTIVATE, handleSocketDeactivate );		}		/**		 * Handles incoming data events generated by the ThinkGear Connector.		 */		private function handleSocketData( event : ProgressEvent ) : void {			read( );			clearOutputBuffer( );        		}		/**		 * Reads byte data using the socket and buffer.		 */		private function read() : void {			readSocketBytes( );			readBuffer( );		}		/**		 * Reads socket data being generated by the ThinkGear Connector.		 */		private function readSocketBytes() : void {			var dataReadStartPoint : int = 0;			var bytesAvailableToRead : int = bytesAvailable;			readBytes( _reader.buffer, dataReadStartPoint, bytesAvailableToRead );		}		/**		 * Call the read method on the reader to process incoming byte data 		 * from the ThinkGear Connector.		 */		private function readBuffer() : void {			_reader.read( );		}		/**		 * Flushes any accumulated data in the socket's output buffer.		 */     		private function clearOutputBuffer() : void {			flush( );		}		/**		 * Dispatched when an input/output error occurs that causes a send or load operation to fail.		 */		private function handleSocketError( e : IOErrorEvent ) : void {			Logger.$.error( this, " Socket Error [" + e.type + "]: " + e.text );		}		/**		 * Dispatched if a call to Socket.connect() attempts to connect either to a server outside 		 * the caller's security sandbox or to a port lower than 1024.		 */		private function handleSecurityError( e : SecurityErrorEvent ) : void {			Logger.$.error( this, " Security Error [" + e.type + "]: " + e.text );					}		/**		 * Dispatched when a network connection has been established.		 */		private function handleSocketConnection( e : Event ) : void {			Logger.$.status( this, " Socket Connection [" + e.type + "]" );		}		/**		 * Dispatched when the server closes the socket connection.		 */		private function handleSocketClose( e : Event ) : void {			Logger.$.status( this, " Socket Close [" + e.type + "]" );					}		/**		 * Dispatched when Flash Player or an AIR application gains operating system 		 * focus and becomes active.		 */		private function handleSocketActivate( e : Event ) : void {			Logger.$.status( this, " Socket Activate [" + e.type + "]" );		}		/**		 * Dispatched when Flash Player or an AIR application loses operating system 		 * focus and is becoming inactive. 		 */		private function handleSocketDeactivate( e : Event ) : void {			Logger.$.status( this, " Socket Deactivate [" + e.type + "]" );					}		/**		 * The ThinkGear Connector (TGC) output format.		 * @see ThinkGearSocket#configure()		 */		public function get format() : String {			return _format;		}		/*** @private */		public function set format(format : String) : void {			_format = format;			configure( format, enableRawOutput );		}		/**		 * The ThinkGear Connector (TGC) raw output mode.		 * @see ThinkGearSocket#configure()		 */		public function get enableRawOutput() : Boolean {			return _enableRawOutput;		}		/*** @private */				public function set enableRawOutput(enableRawOutput : Boolean) : void {			_enableRawOutput = enableRawOutput;			configure( format, enableRawOutput );		}			}}