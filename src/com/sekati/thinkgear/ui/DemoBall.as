/** * com.sekati.thinkgear.ui.DemoBall * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package com.sekati.thinkgear.ui {	import sekati.core.App;	import sekati.display.Canvas;	import sekati.display.ForceSprite;	import sekati.math.MathBase;	import flash.geom.Rectangle;	/**	 * DemoBall provides the ball object to the DemoView.	 */	final public class DemoBall extends ForceSprite {		public static const ALPHA : Number = App.db.config.custom.thinkgear.ball.alpha;		public static const ALPHA_HIGH : Number = App.db.config.custom.thinkgear.ball.alpha_high;				public static const COLOR : uint = App.db.config.custom.thinkgear.ball.color;		public static const SIZE : int = App.db.config.custom.thinkgear.ball.size;		public static const MODULATOR : int = App.db.config.custom.thinkgear.ball.modulate;		private var size : Number;		//private var glow : GradientGlowFilter;		/**		 * DemoBall Constructor		 */		public function DemoBall(vx : Number = 0, vy : Number = 0, mass : Number = 0.5, friction : Number = 0.8, gravityY : Number = 20, gravityX : Number = 0, bounds : Rectangle = null, isDraggable : Boolean = true, hasForce : Boolean = true) {			// generate size and calculate mass based on the size			size = MathBase.random( SIZE / MODULATOR, SIZE * MODULATOR );			mass = (size / (SIZE * MODULATOR));						super( vx, vy, mass, friction, gravityY, gravityX, bounds, isDraggable, hasForce );			configUI( );		}		/**		 * Configure UI Elements.		 */		private function configUI() : void {			graphics.beginFill( COLOR, 1 );			graphics.drawCircle( size, size, size );			graphics.endFill( );			alpha = ALPHA;			x = MathBase.random( 0, Canvas.stage.stageWidth - size * 2 );			//createGlow( );		}		/**		 * Define a gradient glow.		private function createGlow() : void {			glow = new GradientGlowFilter( );			glow.distance = 0;			glow.angle = 45;			//glow.colors = [ 0, 0x99CC33 ];			glow.colors = [ COLOR, 0xffffff ];						glow.alphas = [ 0, ALPHA ];			glow.ratios = [ 0, 255 ];			glow.blurX = 10;			glow.blurY = 10;			glow.strength = 0;			glow.quality = BitmapFilterQuality.HIGH;			glow.type = BitmapFilterType.OUTER;			filters = [ glow ];		}		 */	}}