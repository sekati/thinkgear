/** * com.sekati.thinkgear.ui.SignalMeter * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package com.sekati.thinkgear.ui {	import sekati.core.App;	import sekati.display.Canvas;	import sekati.events.StageEvent;	import sekati.ui.CirclePreloader;	import sekati.views.AbstractLiquidView;	import com.sekati.thinkgear.core.ThinkGearConnector;	import com.sekati.thinkgear.events.SignalQualityEvent;	/**	 * SignalMeter provides a basic visual meter for the signal quality.	 */	final public class SignalMeter extends AbstractLiquidView {		private static const BAR_SPACER : int = 1;		private static const BAR_WIDTH : int = 3;		private static const BAR_BASE_HEIGHT : int = 3;				private static const BAR_ALPHA : Number = App.db.config.custom.thinkgear.signal_meter.alpha;		private static const BAR_COLOR : uint = App.db.config.custom.thinkgear.signal_meter.color;		private var spinner : CirclePreloader;		/**		 * SignalMeter Constructor		 */		public function SignalMeter() {			super( );		}		/**		 * @inheritDoc		 */		override protected function configUI() : void {			ThinkGearConnector.$.reader.addEventListener( SignalQualityEvent.SIGNAL_QUALITY_DATA, renderSignalQuality );			resize( );			initSpinner( );			drawBar( 0 );		}		/**		 * Initialize the no-signal spinner.		 */		private function initSpinner() : void {			var conf : XMLList = App.db.config.custom.thinkgear.signal_meter.spinner;						//spinner = new CirclePreloader( 10, 7.5, 1.5, [ 0xff6600, 0xff3300 ] );			//spinner = new CirclePreloader( 7, 5, 1.5, [ 0xff6600, 0xff3300 ] );			//spinner = new CirclePreloader( 7, 5, 1.5, [ 0xff0000, 0xff00ff ] );			spinner = new CirclePreloader( conf.amount, conf.radius, conf.size, conf.colors.split( ',' ) );			spinner.x = conf.x;			spinner.y = conf.y;		}		/**		 * Draw the signal quality.		 */		private function renderSignalQuality(e : SignalQualityEvent) : void {			// 200 = no signal, 0 = perfect signal.			var quality : int = e.signalQuality.quality;						// clear the signal drawing in prep for redraw ...			graphics.clear( );						// best - 5 bars			if(quality >= 0 && quality < 25) {				drawBar( 5 );			}			// great - 4 bars			if(quality < 50) {				drawBar( 4 );			} 				// good - 3 bars			if(quality < 75) {				drawBar( 3 );						}			// medium - 2 bars			if(quality < 100) {				drawBar( 2 );			}			// poor - 1 bar			if(quality < 200) {				drawBar( 1 );			}			// disconnected - X			if(quality >= 200) {				drawBar( 0 );			}				}		/**		 * Draw a signal bar: 0 being worst, 5 being best.		 */		private function drawBar(barNum : int) : void {			//Logger.$.notice( this, "SIGNAL BAR: " + barNum );			if(barNum == 0) {				/*				// draw red X here				var w : int = 15;				var h : int = 0;				graphics.lineStyle( 3, ALERT_COLOR, 1 );				graphics.moveTo( 10, -5 );				graphics.lineTo( w, h );				graphics.moveTo( 10, h );				graphics.lineTo( w, -5 );				 */				addSpinner( );											} else {				var barHeight : int = BAR_BASE_HEIGHT * barNum;							var barX : int = (BAR_WIDTH + BAR_SPACER) * barNum;				var barY : int = BAR_BASE_HEIGHT - barHeight;							graphics.beginFill( BAR_COLOR, BAR_ALPHA );				graphics.drawRect( barX, barY, BAR_WIDTH, barHeight );				graphics.endFill( );								removeSpinner( );			}		}		/**		 * Add the alert spinner		 */		private function addSpinner() : void {			try {				spinner.start( );				addChild( spinner );			} catch(e : Error) {			}		}		/**		 * Remove the alert spinner		 */		private function removeSpinner() : void {			try {				removeChild( spinner );				spinner.stop( );			} catch(e : Error) {			}		}		/**		 * @inheritDoc		 */		override protected function resize(e : StageEvent = null) : void {			x = Canvas.stage.stageWidth - 30;			y = 15;			}	}}