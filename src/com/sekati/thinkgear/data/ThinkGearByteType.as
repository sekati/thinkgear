/** * com.sekati.thinkgear.data.ThinkGearByteType * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Derrivative of kannopy thinkgear api. */package com.sekati.thinkgear.data {	import sekati.utils.TypeEnforcer;		/**	 * ThinkGearByteType is a utility class used to determine the type of 	 * byte being processed and read from the ThinkGear Connector (TGC).	 */	final public class ThinkGearByteType {				/**		 * Signal quality data signature.		 */		public static  const SIGNAL_QUALITY : int = 0x02;				/**		 * Attention eSense data signature.		 */		public static  const ATTENTION : int = 0x04;				/**		 * Meditation eSense data signature.		 */		public static  const MEDITATION : int = 0x05;				/**		 * EEG Powers data signature.		 */		public static  const EEG_POWERS : int = 0x81;				/**		 * SYNC byte data signature.		 */		public static  const SYNC_BYTE : int = 0xAA;		/**		 * Returns true if the byte contains a Signal Quality data.		 */		public static function isSignalQualityByte( byte : uint ) : Boolean {			return byte == SIGNAL_QUALITY;		}		/**		 * Returns true if the byte contains a attention data.		 */		public static function isAttentionByte( byte : uint ) : Boolean {			return byte == ATTENTION;		}		/**		 * Returns true if the byte contains a meditation data.		 */		public static function isMeditationByte( byte : uint ) : Boolean {			return byte == MEDITATION;		}		/**		 * Returns true if the byte contains a EEG Powers data.		 */		public static function isEEGPowersByte( byte : uint ) : Boolean {			return byte == EEG_POWERS;		}				/**		 * ThinkGearByteType Static Constructor		 */		public function ThinkGearByteType() {			TypeEnforcer.enforceStatic( ThinkGearByteType );		}	}}