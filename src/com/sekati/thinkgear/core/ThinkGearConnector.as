/** * com.sekati.thinkgear.core.ThinkGearConnector * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package com.sekati.thinkgear.core {	import sekati.converters.BoolConverter;	import sekati.core.App;	import sekati.log.Logger;		import com.sekati.thinkgear.events.EEGPowersEvent;	import com.sekati.thinkgear.events.ESenseDataEvent;	import com.sekati.thinkgear.events.SignalQualityEvent;	import com.sekati.thinkgear.net.ThinkGearSocket;	import com.sekati.thinkgear.reader.ThinkGearReader;		import flash.events.EventDispatcher;			/**	 * ThinkGearConnector provides a singleton wrapper to wind-up the ThinkGearSocket and ThinkGearReader.	 * 	 * This class should not be confused with the "TGC" (ThinkGear Connector) binary application which 	 * catches data and passes it to the socket - though this does ultimately the same thing on the 	 * actionscript end of things.	 */	final public class ThinkGearConnector extends EventDispatcher {		/*** @private */		private var _socket : ThinkGearSocket;				/*** @private */		private var _reader : ThinkGearReader;				/*** @private */				private var _debugMode : Boolean;				/*** @private */		private static var _instance : ThinkGearConnector;		/**		 * ThinkGearConnector Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function ThinkGearConnector( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "com.sekati.thinkgear.core.ThinkGearConnector is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}		}		/**		 * Singleton Accessor		 * @return ThinkGearConnector		 */		public static function getInstance() : ThinkGearConnector {			if( _instance == null ) _instance = new ThinkGearConnector( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return ThinkGearConnector		 */		public static function get $() : ThinkGearConnector {			return ThinkGearConnector.getInstance( );			}		/**		 * Initialize the ThinkGearConnector.		 */		public function initialize() : void {						debugMode = BoolConverter.toBoolean( App.db.config.custom.thinkgear.debug_connector );						_reader = new ThinkGearReader( );			_socket = new ThinkGearSocket( );			reader.addEventListener( SignalQualityEvent.SIGNAL_QUALITY_DATA, signalQualityUpdate );			reader.addEventListener( ESenseDataEvent.ESENSE_DATA, eSenseDataUpdate );			reader.addEventListener( EEGPowersEvent.EEG_POWERS_DATA, eegPowersUpdate );			socket.reader = reader;			socket.start( );					}		/**		 * Handle signal quality events.		 */		private function signalQualityUpdate( e : SignalQualityEvent ) : void {			if(debugMode) {				Logger.$.trace( this, "signalQualityUpdate: " + e.signalQuality.toString( ) );			}		}		/**		 * Handle eSense events.		 */		private function eSenseDataUpdate( e : ESenseDataEvent ) : void {			if(debugMode) {				Logger.$.trace( this, "eSenseDataUpdate: " + e.eSenseData.toString( ) );			}		}		/**		 * Handle ePowers events.		 */		private function eegPowersUpdate( e : EEGPowersEvent ) : void {			if(debugMode) {				Logger.$.trace( this, "eegPowersUpdate: " + e.eegPowers.toString( ) );			}		}						/**		 * The ThinkGearSocket.		 */						public function get socket() : ThinkGearSocket {			return _socket;		}		/**		 * The ThinkGearReader.		 */		public function get reader() : ThinkGearReader {			return _reader;		}		/**		 * Debug mode gives verbose logger output.		 */		public function get debugMode() : Boolean {			return _debugMode;		}		/*** @private */				public function set debugMode(debugMode : Boolean) : void {			_debugMode = debugMode;		}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}		